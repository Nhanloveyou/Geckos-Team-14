{"version":3,"sources":["Component/Background/images/scene1.jpg","Component/Background/images/scene2.jpg","Component/Background/images/scene4.jpg","Component/Background/images/scene5.jpg","Component/Background/images/scene6.jpg","Component/Background/images/scene7.jpg","Component/Background/images/scene8.jpg","Component/Background/images/scene9.jpg","Component/Background/images/dragon.jpg","Component/Background/images/sunset.jpg","sass/images/dragon.jpg","Component/BoardNav/BoardTitleMenu.js","Component/Background/BackgroundSelection.js","Component/Background/BackgroundType.js","Component/MainMenu.js","Component/Team.js","Component/BoardNav/BoardNav.js","Component/TrelloNav.js","Component/Card/CardForm.js","Component/Card/ListItem.js","Component/Card/CheckList.js","Component/CardModal/CardModal.js","Component/Card/Card.js","Component/List/ListMenu.js","Component/List/List.js","App.js","serviceWorker.js","index.js","Component/Background/images/scene3.jpg"],"names":["module","exports","__webpack_require__","p","BoardTitleMenu","_ref","handleShowMenu","handleNameSubmit","placeholder","title","inputLabel","buttonLabel","react_default","a","createElement","className","onClick","onSubmit","type","name","backgrounds","Colors","Images","Scene1","Scene2","Scene3","Scene4","Scene5","Scene6","Scene7","Scene8","Scene9","Dragon","Sunset","BackgroundSelection","state","setBackground","newBackground","_this","props","handleBackgroundChange","_this2","this","colorMenu","map","key","style","backgroundColor","concat","imageMenu","backgroundImage","Component","BackgroundType","handleColorMenu","toggleOptionsMenu","handleImageMenu","toggleImageMenu","changeBackground","Background_BackgroundSelection","backgroundType","menuTitles","MainMenu","menuTitle","TypeMenuTitle","toggleMenuControl","setState","toggleBackgroundMenu","prevState","handleBackgroundColor","handleBackgroundImage","render","MMisOpen","Background_BackgroundType","toggleCloseButton","react_fontawesome_index_es","icon","faTimes","React","Team","teamMembers","member","id","deleteMember","initials","BoardNav","BoardName","showNameMenu","inviteMember","starColor","team","e","preventDefault","newName","target","elements","value","inputLength","length","alert","handleInviteMember","handleMemberSubmit","newMember","abbreviate","nameAbbr","split","charAt","join","console","log","handleMemberAdd","newMem","uuid","replace","push","window","confirm","newMembers","filter","toggleYellow","_this$state","build_default","parent","prefix","Component_MainMenu","menuState","color","Component_Team","BoardNav_BoardTitleMenu","TrelloNav","CardForm","cardVal","handleCardValChange","addToCard","toggleCardForm","rows","onChange","ListItem","isEditable","textValue","itemPosition","componentDidMount","item","onClickTextField","onChangeTextField","handleTextFormSubmit","index","complete","onDeleteCheckListItem","editedChecklistItem","editCheckListItem","_this$props","onToggleCheckBox","checked","CheckList","addingNewItem","editingTitle","checkListTitle","checkList","handleTitleSubmitForm","changeCheckListTitle","addNewCheckListItem","listItem","addCheckListItem","onChangeTitleForm","toggleCheckListTitle","toggleNewItem","deleteCheckList","checkListExists","tasks","progressPct","items","tasksDone","reduce","acc","parseInt","_calculatePercent","percentageComplete","width","checklistItem","Card_ListItem","addItem","dateStyle","height","CardModal","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onDateChange","createdAt","editedCard","objectSpread","card","dueDate","editCard","onCalendarFocusChange","focused","calendarFocused","createNewCheckList","cardId","itemToAdd","toConsumableArray","newCheckList","position","editedCheckList","currIndex","toggledCheckListItem","editedCheckListItem","handleDescriptionChange","description","submitDescription","addCardDescription","isSubmitted","isEdit","editDescription","descripton","currentDate","moment","isModalOpen","toggleModal","list","deleteCard","content","display","isBefore","format","Card_CheckList","disabled","react_dates","readOnly","date","onFocusChange","hideKeyboardShortcutsPanel","numberOfMonths","isOutsideRange","Card","react","react_beautiful_dnd_esm","draggableId","provided","assign","draggableProps","dragHandleProps","ref","innerRef","CardModal_CardModal","disableInteractiveElementBlocking","isDragDisabled","ListMenu","menuDisplay","titleName","handleToggleListMenu","node","contains","toggleListMenu","displayCopyList","onCopyTitleChange","deleteList","listId","copyList","document","addEventListener","removeEventListener","List","showCardForm","listMenuOpen","handleSaveTitle","prevProps","toggleTitleForm","saveListTitle","addCard","_this$props$list","handleTitleChange","cardList","autoFocus","List_ListMenu","droppableId","droppableProps","Card_Card","Card_CardForm","App","styleType","addList","lists","newList","defineProperty","taskIds","listOrder","copyCards","cardsToCopy","cards","forEach","idToCopy","arguments","undefined","listCopy","indexOf","_this$copyCards","slice","newCards","taskId","newLists","newListOrder","splice","_this$state2","newCard","hasOwnProperty","cardName","newTaskIds","task","list_copy","onDragEnd","result","_objectSpread4","destination","source","home","foreign","homeTaskIds","Array","from","newHome","foreignTaskIds","newForeign","newState","newCardIds","sample_card","sample_list","_this$state3","Component_TrelloNav","Component_BoardNav_BoardNav","direction","_React$createElement","Component_List_List","Boolean","location","hostname","match","ReactDOM","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a892f7d1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/scene1.03811d32.jpg\";","module.exports = __webpack_public_path__ + \"static/media/scene2.1d01566a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/scene4.c3461ca4.jpg\";","module.exports = __webpack_public_path__ + \"static/media/scene5.133f90dd.jpg\";","module.exports = __webpack_public_path__ + \"static/media/scene6.cf2b528c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/scene7.a33cadf5.jpg\";","module.exports = __webpack_public_path__ + \"static/media/scene8.c17ddaef.jpg\";","module.exports = __webpack_public_path__ + \"static/media/scene9.caa6d43a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/dragon.d1049b7a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/sunset.de0fc6d3.jpg\";","module.exports = __webpack_public_path__ + \"static/media/dragon.d1049b7a.jpg\";","import React from \"react\";\n// import { prependOnceListener } from \"cluster\";\n\n// const menuLabels = {\n//   title: 'RenameBoard',\n//   inputLabel: 'Name',\n//   placeholder: BoardName,\n//   buttonLabel: 'Rename'\n// }\n\n\nconst BoardTitleMenu = ({\n  \n  handleShowMenu,\n  handleNameSubmit,\n  \n  placeholder,\n  title,\n  inputLabel,\n  buttonLabel\n\n}) => (\n    <div className=\"board-menu\">\n      <div className=\"board-menu--header\">\n        <h2 className=\"board-menu--title\">{title}</h2>\n        <button className=\"board-menu--x\" onClick={handleShowMenu}><i className=\"fas fa-times\"></i></button>\n      </div>\n\n      <div className=\"board-menu--form\">\n        <form onSubmit={handleNameSubmit}>\n          <label>{inputLabel}</label>\n          <input\n            className=\"board-menu--input\"\n            type=\"text\"\n            name=\"name\"\n            placeholder={placeholder}\n          />\n          <button className=\"menu-btn button-green\">{buttonLabel}</button>\n        </form>\n      </div>\n    </div>\n  );\n\nexport default BoardTitleMenu;\n","import React, { Component } from \"react\";\n\nimport Scene1 from './images/scene1.jpg';\nimport Scene2 from './images/scene2.jpg';\nimport Scene3 from './images/scene3.jpg';\nimport Scene4 from './images/scene4.jpg';\nimport Scene5 from './images/scene5.jpg';\nimport Scene6 from './images/scene6.jpg';\nimport Scene7 from './images/scene7.jpg';\nimport Scene8 from './images/scene8.jpg';\nimport Scene9 from './images/scene9.jpg';\nimport Dragon from './images/dragon.jpg';\nimport Sunset from './images/sunset.jpg';\n\nlet backgrounds = {\n    Colors: ['#3D348B', '#7678ED', '#F7B801', '#F18701', '#F35B04', '#119DA4', '#19647E'],\n    Images: [Scene1, Scene2, Scene3, Scene4, Scene5, Scene6, Scene7, Scene8, Scene9, Dragon, Sunset],\n}\n\nclass BackgroundSelection extends Component {\n    state = {\n\n    };\n\n\n    setBackground = (newBackground) => { this.props.handleBackgroundChange(newBackground)}\n\n    render() {\n\n        return (\n            <div>\n                <div className={(this.props.colorMenu) ? \"background-options-main background-options-main-show\" : \"background-options-main background-options-main-hide\"}>\n                    {backgrounds.Colors.map((newBackground) =>\n                        <div className=\"background-options\" key={newBackground}>\n                            <div className=\"background-option--wrapper\">\n                                <div\n                                    style={{ backgroundColor: `${newBackground}` }}\n                                    className=\"background-options background-option\"\n                                    onClick={() => this.setBackground(newBackground)}\n                                >\n                                </div>\n                            </div>\n                        </div>\n                    )}\n                </div>\n                <div className={(this.props.imageMenu) ? \"background-options-main background-options-main-show\" : \"background-options-main background-options-main-hide\"}>\n                    {backgrounds.Images.map((newBackground) =>\n                        <div className=\"background-options\" key={newBackground}>\n                            <div className=\"background-option--wrapper\">\n                                <div\n                                    style={{ backgroundImage: `url(${newBackground})` }}\n                                    className=\"background-options background-option\"\n                                    onClick={() => this.setBackground(newBackground)}\n                                >\n                                </div>\n                            </div>\n                        </div>\n                    )}\n                </div>\n\n\n \n\n\n            </div>\n\n        )\n    }\n}\n\nexport default BackgroundSelection;\n\n// <div className={(this.props.colorMenu) ? \"background-options-main background-options-main-show\" : \"background-options-main background-options-main-hide\"}>\n// {backgrounds.Colors.map((backgroundColor) =>\n//     <div className=\"background-options\" key={backgroundColor}>\n//         <div className=\"background-option--wrapper\">\n//             <div\n//                 style={{ backgroundColor }}\n//                 className=\"background-options background-option\"\n//                 onClick={() => this.setBackground(backgroundColor)}\n//             >\n//             </div>\n//         </div>\n//     </div>\n// )}\n// </div>\n// <div className={(this.props.imageMenu) ? \"background-options-main background-options-main-show\" : \"background-options-main background-options-main-hide\"}>\n// {backgrounds.Images.map((backgroundImage) =>\n//     <div className=\"background-options\" key={backgroundImage}>\n//         <div className=\"background-option--wrapper\">\n//             <div\n//                 style={{ backgroundImage: `url(${backgroundImage})` }}\n//                 className=\"background-options background-option\"\n//                 onClick={() => this.setBackground(backgroundImage)}\n//             >\n//             </div>\n//         </div>\n//     </div>\n// )}\n// </div>","import React, { Component } from \"react\";\nimport BackgroundSelection from './BackgroundSelection.js';\nimport Scene3 from './images/scene3.jpg';\n\nclass BackgroundType extends Component {\n    state = {\n        \n    };\n\n    handleColorMenu = () => {    \n        this.props.toggleOptionsMenu();\n    }\n    \n    handleImageMenu = () => {\n        this.props.toggleImageMenu(); \n    }\n\n    \n\n    render() {\n    \n        return (\n            <div className={this.props.changeBackground ? \"background-menu-main background-menu-main-show\" : \"background-menu-main background-menu-main-hide\"}>\n            <BackgroundSelection \n                colorMenu={this.props.colorMenu} \n                imageMenu={this.props.imageMenu}\n                backgroundType={this.state.backgroundType}\n                handleBackgroundChange={this.props.handleBackgroundChange}\n                />    \n            <div className=\"background-types\">\n                    <div className=\"background-types--wrapper\"><div onClick={this.handleColorMenu} className=\"background-menu background-menu--colors\"></div><h3>Colors</h3></div>\n                    <div className=\"background-types--wrapper\"><div onClick={this.handleImageMenu} className=\"background-menu background-menu--images\" style={{backgroundImage: `url(${Scene3})`}}></div><h3>Photos</h3></div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default BackgroundType;","import React from 'react';\nimport BackgroundType from './Background/BackgroundType.js';\n\nimport { library } from '@fortawesome/fontawesome-svg-core';\n// import { library, config } from '@fortawesome/fontawesome-svg-core'; config.autoAddCss = false;\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\n\nconst menuTitles = ['Menu', 'Change Background', ['Colors', 'Photos']];\n\nclass MainMenu extends React.Component {\n\n    state = {\n        menuTitle: menuTitles[0],\n        TypeMenuTitle: true,\n\n        changeBackground: false,\n\n        colorMenu: false,\n        imageMenu: false,\n    }\n\n    toggleMenuControl = () => {\n        if (this.state.colorMenu || this.state.imageMenu) {\n            this.setState(() => ({\n                colorMenu: false,\n                imageMenu: false\n            }))\n        } else this.toggleBackgroundMenu()\n    }\n\n    //closes and opens the type menu\n    toggleBackgroundMenu = () => {\n\n        //arrow shows when type menu and option menus are open\n        this.setState((prevState) => ({\n            changeBackground: !prevState.changeBackground,\n            menuTitle: prevState.changeBackground ? 'Menu' : 'Change Background'\n        }))\n    }\n\n    //closes and opens the color options menu\n    toggleOptionsMenu = () => {\n        this.setState((prevState) => ({\n            colorMenu: !prevState.colorMenu,\n            menuTitle: !prevState.colorMenu ? 'Colors' : 'Change Background'\n        }))\n        this.props.handleBackgroundColor();\n\n    }\n\n    //closes and opens the image options menu\n    toggleImageMenu = () => {\n\n        this.setState((prevState) => ({\n            imageMenu: !prevState.colorMenu,\n            menuTitle: !prevState.imageMenu ? 'Photos' : 'Change Background'\n        }))\n        this.props.handleBackgroundImage();\n    }\n\n    // updateMenuTitle = () => {\n       \n    // };\n\n\n    render = () => {\n        return (\n            <div className={this.props.MMisOpen ? \"main-menu__wrapper\" : \"main-menu__wrapper--hide\"}>\n                <div className={this.props.MMisOpen ? \"main-menu main-menu--show\" : \"main-menu main-menu--hide \"}>\n                    <BackgroundType\n                        changeBackground={this.state.changeBackground}\n                        toggleOptionsMenu={this.toggleOptionsMenu}\n                        toggleImageMenu={this.toggleImageMenu}\n                        colorMenu={this.state.colorMenu}\n                        imageMenu={this.state.imageMenu}\n\n                        handleBackgroundChange={this.props.handleBackgroundChange}\n                        handleBackgroundColor={this.props.handleBackgroundColor}\n                        handleBackgroundImage={this.props.handleBackgroundImage}\n                    />\n                    <div className=\"main-menu__section\">\n                        {this.state.changeBackground ? (\n                            <button\n                                className=\"main-menu-arrow main-menu-arrow-show\"\n                                onClick={this.toggleMenuControl}>\n                                <i className=\"fas fa-arrow-left\"></i>\n                            </button>\n                        ) : (\n                                <button\n                                    className=\"main-menu-arrow main-menu-arrow-hide\"\n                                    onClick={this.toggleMenuControl}>\n                                    <i className=\"fas fa-arrow-left\"></i>\n                                </button>\n                            )\n                        }\n\n\n                        <h2 className=\"main-menu__title\">{this.state.menuTitle}</h2>\n                        <button\n                            className=\"btn--close-menu\"\n                            onClick={this.props.toggleCloseButton}\n                        ><FontAwesomeIcon icon={faTimes} />\n                        </button>\n                    </div>\n\n                    <div className=\"main-menu__section\">\n                        <ul className=\"options__list\">\n                            <li className=\"option__item icon__item\" onClick={this.toggleBackgroundMenu}><i className=\"fas fa-brush menu-icon\"></i>Change Background</li>\n                            <li className=\"option__item icon__item\"><i className=\"fas fa-filter menu-icon\"></i>Filter Cards</li>\n                            <li className=\"option__item icon__item\"><i className=\"fas fa-fill menu-icon\"></i>Stickers</li>\n                            <li className=\"option__item icon__item\"><i className=\"fas fa-ellipsis-h menu-icon\"></i>More</li>\n                        </ul>\n                    </div>\n                    <div className=\"main-menu__section\">\n                        <h3 className=\"activity-menu__title icon__item\"><i className=\"fas fa-tasks menu-icon\"></i>Activity</h3>\n                    </div>\n\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default MainMenu;","import React, { Component } from \"react\";\n\nclass Team extends Component {\n    state = {\n\n    }\n\n    render() {\n\n\n\n        return (\n            <div className=\"full-team-members\">\n\n                {this.props.teamMembers.map((member) =>\n                    <div className=\"team-member\" key={member.id} onClick={() => this.props.deleteMember(member.id)}>\n                        {member.initials}\n                    </div>\n                )}\n\n\n            </div>\n        )\n    }\n\n}\n\nexport default Team;","import React, { Component } from \"react\";\nimport BoardTitleMenu from './BoardTitleMenu.js';\nimport MainMenu from \"../MainMenu.js\";\nimport Team from \"../Team.js\";\nimport uuid from \"uuid\";\nimport SimpleStorage from \"react-simple-storage\";\n\nclass BoardNav extends Component {\n\n  state = {\n    BoardName: \"Add Board Name\",\n\n    showNameMenu: false,\n    inviteMember: false,\n\n    MMisOpen: false,\n    starColor: 'white',\n\n    team: [\n      {\n        id: 'nr',\n        name: 'Natalie Roode',\n        initials: 'NR'\n      },\n      {\n        id: 'cf',\n        name: 'Carlos Fins',\n        initials: 'CF'\n      },\n      {\n        id: 'jg',\n        name: 'Juan Garcia',\n        initials: 'JG'\n      },\n      {\n        id: 'ph',\n        name: 'Paul Hong',\n        initials: 'PH'\n      },\n\n    ],\n  };\n\n\n\n  // -- handle main menu --\n\n  toggleCloseButton = (e) => {\n    e.preventDefault();\n    this.setState((prevState) => ({\n      MMisOpen: !prevState.MMisOpen\n    }))\n  }\n\n  // -- update board name menu --\n  handleShowMenu = () => {\n    const { showNameMenu } = this.state;\n    this.setState({\n      showNameMenu: !showNameMenu\n    });\n  };\n\n  // -- handle board name submission --\n  handleNameSubmit = e => {\n    e.preventDefault();\n    const newName = e.target.elements.name.value\n    const inputLength = newName.length;\n    if (inputLength === 0) {\n      alert('please enter a name')\n    } else if (inputLength !== 0) {\n      this.setState({\n        BoardName: newName,\n        showNameMenu: false,\n      });\n    }\n  }\n\n  // -- update member invite menu ---\n  handleInviteMember = () => {\n    const { inviteMember } = this.state;\n    this.setState({\n      inviteMember: !inviteMember\n    });\n  };\n\n  // -- handle member add submission --\n  handleMemberSubmit = e => {\n    e.preventDefault();\n    var newMember = e.target.elements.name.value\n    const inputLength = newMember.length;\n    if (inputLength === 0) {\n      alert('please enter a name')\n    } else if (inputLength !== 0) {\n      this.abbreviate(newMember);\n      // let updateTeam = []\n\n    }\n  }\n\n  abbreviate = (newMember) => {\n    let nameArr = newMember.split(' ').map((name) => name.charAt(0));\n    let nameAbbr = nameArr.join('');\n    console.log(nameAbbr);\n    this.handleMemberAdd(newMember, nameAbbr)\n  }\n\n  handleMemberAdd = (newMember, nameAbbr) => {\n    const { team } = this.state;\n    // generate member id\n    const memId = uuid().replace(/-/g, \"\");\n    // add a new member\n    const newMem = {\n      id: memId,\n      name: newMember,\n      initials: nameAbbr\n    };\n\n    team.push(newMem);\n    this.setState({\n      team,\n      inviteMember: false,\n    });\n  };\n\n  // ------ delete member -------\n  deleteMember = id => {\n    const { team } = this.state;\n    const willDelete = window.confirm('Remove this team member?')\n\n    if (willDelete) {\n      const newMembers = team.filter(member => member.id !== id);\n      console.log(newMembers);\n      this.setState({ team: newMembers });\n    }\n\n  }\n\n  toggleYellow = () => {\n    this.setState((prevState) => ({\n      starColor: (prevState.starColor === '#f2d600' ? 'white' : '#f2d600')\n    }));\n  };\n\n\n  render() {\n    const { showNameMenu, BoardName, inviteMember } = this.state;\n    return (\n      <div className=\"board-nav-wrapper\">\n        <SimpleStorage parent={this} prefix={\"TrelloClone\"} />\n        <MainMenu\n          menuState={false}\n          MMisOpen={this.state.MMisOpen}\n          toggleCloseButton={this.toggleCloseButton}\n          handleBackgroundChange={this.props.handleBackgroundChange}\n          handleBackgroundColor={this.props.handleBackgroundColor}\n          handleBackgroundImage={this.props.handleBackgroundImage}\n        />\n        <div className=\"board-nav\">\n          <div className=\"menu-wrapper\">\n            <button\n              onClick={this.handleShowMenu}\n              className=\"btn-nav board-nav--title\">\n              {BoardName}\n            </button>\n            <button\n              className=\"btn-nav board-star\" onClick={this.toggleYellow} style={{ color: `${this.state.starColor}` }}>\n              <i className=\"far fa-star\"></i>\n            </button>\n            <span className=\"divider\"></span>\n            <span className=\"group\">Chingu</span>\n            <span className=\"divider\"></span>\n            <div className=\"full-team\">\n\n              <Team\n                teamMembers={this.state.team}\n                deleteMember={this.deleteMember} />\n              <div className=\"team-size\">\n                {this.state.team.length}\n              </div>\n\n              <button className=\"invite-btn\" onClick={this.handleInviteMember}><i className=\"fas fa-user-plus\"></i>Invite</button>\n\n              {\n                inviteMember && (\n                  <BoardTitleMenu\n                    handleShowMenu={this.handleInviteMember}\n                    handleNameSubmit={this.handleMemberSubmit}\n\n                    title={\"Add a Member\"}\n                    inputLabel={\"Name\"}\n                    placeholder={\"Enter name\"}\n                    buttonLabel={\"Add\"}\n\n                  />\n                )}\n\n            </div>\n          </div>\n\n          <button className=\"btn-nav board-nav--menu\" onClick={this.toggleCloseButton}><i className=\"fas fa-ellipsis-h\"></i>Show Menu</button>\n          {\n            showNameMenu && (\n              <BoardTitleMenu\n                handleShowMenu={this.handleShowMenu}\n                handleNameSubmit={this.handleNameSubmit}\n\n                title={\"Rename Board\"}\n                inputLabel={\"Name\"}\n                placeholder={BoardName}\n                buttonLabel={\"Rename\"}\n              />\n            )}\n\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default BoardNav;\n\n// {this.state.team.map((member)=>\n//   <Team\n//     teamMembers={this.state.team} key={member.name}/>\n//   )}  ","import React from \"react\";\n\nconst TrelloNav = () => (\n    <div className=\"trello-nav\">\n      <h1 className=\"trello-nav--title\"><i className=\"fas fa-dragon\"></i>Dragon</h1>\n    </div>\n  );\n  \n  export default TrelloNav;","import React from \"react\";\n\nconst CardForm = ({\n  cardVal,\n  handleCardValChange,\n  addToCard,\n  toggleCardForm\n}) => (\n  <form className=\"card--form\" onSubmit={addToCard}>\n    <textarea\n      rows=\"3\"\n      value={cardVal}\n      onChange={handleCardValChange}\n      placeholder=\"Enter a title for this card...\"\n    />\n    <button type=\"submit\">Add Card</button>\n    <span className=\"cancel-btn\" onClick={toggleCardForm}>\n    <i className=\"fas fa-times\"></i>\n    </span>\n  </form>\n);\n\nexport default CardForm;\n","import React, { Component } from 'react';\n\nclass ListItem extends Component {\n\n    state = {\n        isEditable: false,\n        textValue:'',\n        itemPosition:''\n    }\n\n    componentDidMount = () => {\n        if (this.props.item !== this.state.textValue) {\n            this.setState({ textValue : this.props.item });\n        }\n    }    \n\n    onClickTextField = (textValue) => {\n        this.setState({ isEditable : true });\n    }\n\n    onChangeTextField = (textValue) => {\n        this.setState({ textValue });\n    }\n\n    handleTextFormSubmit = (index, complete) => {\n        if (this.state.textValue === '') {\n            this.props.onDeleteCheckListItem(this.props.index);\n        } else {\n        const editedChecklistItem = {item: this.state.textValue, complete}\n        this.props.editCheckListItem(index, editedChecklistItem);\n        }\n        this.setState({ isEditable: false });\n    }\n\n    render() {\n        const {item, complete, onDeleteCheckListItem, onToggleCheckBox, index} = this.props;\n        return (\n            <li className=\"checklist__item\">\n                <input \n                        type=\"checkbox\" name=\"item\" \n                        value={item} \n                        checked={complete} \n                        onChange={()=>onToggleCheckBox(index)}\n                        className=\"checklist__complete\"\n                />\n                {(this.state.isEditable ? (\n                    <form onSubmit={(e)=> {\n                        e.preventDefault();\n                        this.handleTextFormSubmit(index, complete);\n                        }}>\n                        <input \n                            type='text' \n                            value={this.state.textValue} \n                            onChange={(e)=> {\n                                this.onChangeTextField(e.target.value);\n                            }}\n                        />\n                    </form>\n                ) : (\n                    <p className=\"checklist__name\" onClick={()=> {this.onClickTextField(item)}}>{item}</p>\n                ))}\n                <button className=\"btn btn--checklist-delete\" onClick={()=>onDeleteCheckListItem(index)}><i className=\"fas fa-times close-item\"></i></button>\n            </li>\n        );\n    }\n}\n\nexport default ListItem;","import React, { Component } from 'react';\nimport ListItem from './ListItem';\n\nconst _calculatePercent =(items) => {\n    let tasksDone = items.reduce((acc, item)=> item.complete ? acc+1 : acc,0);\n    let progressPct = parseInt((tasksDone / items.length) * 100);\n    return progressPct;\n\n}\n\nclass CheckList extends Component {\n    state = {\n        addingNewItem : false,\n        editingTitle : false,\n        checkListTitle : ''\n    }\n\n    componentDidMount = () => {\n        if (this.props.checkList.title !== this.state.checkListTitle) {\n            this.setState({ checkListTitle : this.props.checkList.title });\n        }\n    }\n\n    handleTitleSubmitForm = () => {\n        this.props.changeCheckListTitle(this.state.checkListTitle);\n        this.setState({ editingTitle : false });\n    }\n\n    addNewCheckListItem = (listItem) => {\n        if (listItem) {\n            this.props.addCheckListItem({item: listItem, complete: false});\n        }\n        this.setState({ addingNewItem : false });\n    }\n\n    onChangeTitleForm = (title) => {\n        if (title) this.setState({ checkListTitle : title });\n    }\n\n    toggleCheckListTitle = () => (this.setState({ editingTitle : true }));\n    toggleNewItem = () => (this.setState({ addingNewItem : true }));\n\n\n    render() {\n        const { checkList, deleteCheckList, onToggleCheckBox, editCheckListItem, onDeleteCheckListItem } = this.props\n        const checkListExists = (checkList && checkList.tasks);\n        let progressPct = checkList.tasks.length !==0 ? _calculatePercent(checkList.tasks) : false;\n        let percentageComplete = progressPct ? { width: `${progressPct}%` } : {};\n        return (\n            <div className=\"checklist\">\n                <div className=\"checklist__heading\">\n                    {!this.state.editingTitle ? \n                    (<h2 \n                    className=\"checklist__title\"\n                    // onClick={this.toggleCheckListTitle}\n                    ><i className=\"far fa-check-square left-side-icons\"></i>{checkList.title}</h2>) :\n                    (<form onSubmit={(e)=> {\n                        e.preventDefault();\n                        this.handleTitleSubmitForm();\n                    }}>\n                        <input \n                        type=\"text\" \n                        value={this.state.checkListTitle} \n                        onChange={(e)=> {\n                            e.preventDefault();\n                            this.onChangeTitleForm(e.target.value);\n                            console.log(this.state.checkListTitle);\n                        }}\n                        />\n                    </form>)\n                    }\n                    <button className=\"btn btn--checklist-edit\" onClick={this.toggleCheckListTitle}>Edit...</button>\n                    <button className=\"btn btn--checklist-delete\" onClick={deleteCheckList}>Delete...</button>\n                </div>\n                <div className=\"checklist-content\">\n                    {\n                        // progressPct != 0 && \n                        <div className=\"progress-bar\">\n                            <div className=\"progress-bar__inner\" style={percentageComplete}>\n                            <span className=\"progress-percent-display\">{progressPct == 0 ? \"\\xa0\" : progressPct + \"%\"}</span>\n                            </div>\n                            \n                        </div>\n                    }\n                    <ul className=\"checklist__items\">\n                        {checkListExists && checkList.tasks.map((checklistItem, index) => \n                        <ListItem \n                                key={index}\n                                index={index}\n                                checklistItem={checklistItem}\n                                item={checklistItem.item}\n                                complete={checklistItem.complete}\n                                onToggleCheckBox={onToggleCheckBox}\n                                editCheckListItem={editCheckListItem}\n                                onDeleteCheckListItem={onDeleteCheckListItem}\n                            />)\n                        }\n                    </ul>\n                    {!this.state.addingNewItem ? (\n                        <p \n                        className=\"add-new-checkList__placeholder\"\n                        onClick={this.toggleNewItem}\n                        >Add an item...</p>\n                    ) :\n                    (<form \n                    className=\"add-new-checkList\"\n                    placeholder=\"Add an item...\"\n                    onSubmit={(e)=>{\n                        e.preventDefault();\n                        this.addNewCheckListItem(e.target.elements.addItem.value);\n                        }\n                    }>\n                        <input type=\"text\" name=\"addItem\"/>\n                        <button className=\"btn btn--submit\">Add</button>\n                    </form>)\n                    }\n                </div>\n            </div>\n        );\n    }\n};\n\nexport default CheckList;","import React, { Component } from 'react';\nimport 'react-dates/initialize';\nimport { SingleDatePicker } from 'react-dates';\nimport 'react-dates/lib/css/_datepicker.css';\nimport '../CardModal/datepicker.css';\nimport moment from 'moment';\nimport CheckList from '../Card/CheckList';\n\nconst dateStyle = {\n    width: '75px',\n    height: '30px'\n}\n\nexport default class CardModal extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            calendarFocused: false,\n            isSubmitted: false,\n            isEdit: false,\n            descripton: \"\",\n        }\n    }\n\n    onDateChange = (createdAt) => {\n        const editedCard = { ...this.props.card, dueDate: createdAt };\n        this.props.editCard(this.props.card.id, editedCard);\n    }\n\n    onCalendarFocusChange = ({ focused }) => {\n        this.setState(() => ({ calendarFocused: focused }));\n    }\n    createNewCheckList = () => {\n        const newCheckList = {\n            title: \"To-Do\",\n            tasks: []\n        }\n        const editedCard = {\n            ...this.props.card,\n            checkList: newCheckList\n        }\n        this.props.editCard(this.props.cardId, editedCard);\n    }\n\n    deleteCheckList = () => {\n        const editedCard = {\n            ...this.props.card\n        }\n        delete editedCard.checkList;\n        this.props.editCard(this.props.cardId, editedCard);\n    }\n\n    addCheckListItem = (itemToAdd) => {\n        if (itemToAdd) {\n            const tasks = [...this.props.card.checkList.tasks, itemToAdd];\n            const newCheckList = { ...this.props.card.checkList, tasks };\n            const editedCard = {\n                ...this.props.card,\n                checkList: newCheckList\n            }\n            this.props.editCard(this.props.cardId, editedCard);\n        }\n    }\n\n    changeCheckListTitle = (title) => {\n        const checkList = {\n            ...this.props.card.checkList,\n            title\n        }\n        const editedCard = {\n            ...this.props.card,\n            checkList\n        }\n        this.props.editCard(this.props.cardId, editedCard);\n    }\n\n    editCheckListItem = (position, editedCheckList) => {\n        const tasks = this.props.card.checkList.tasks.map((checklistItem, index) => (index !== position ? checklistItem : editedCheckList));\n\n        const editedCard = {\n            ...this.props.card,\n            checkList: {\n                title: this.props.card.checkList.title,\n                tasks\n            }\n        }\n        this.props.editCard(this.props.cardId, editedCard);\n    }\n\n    // onChangeCheckListItem = itemClicked => {\n    //     this.props.onChangeCheckListItem(this.props.cardId, itemClicked);\n    // }\n\n    onDeleteCheckListItem = index => {\n        const tasks = this.props.card.checkList.tasks.filter((item, currIndex) => currIndex !== index);\n        const editedCard = {\n            ...this.props.card,\n            checkList: {\n                title: this.props.card.checkList.title,\n                tasks\n            }\n        }\n        this.props.editCard(this.props.cardId, editedCard);\n    }\n\n\n    onToggleCheckBox = index => {\n        const toggledCheckListItem = this.props.card.checkList.tasks[index];\n        const editedCheckListItem = { item: toggledCheckListItem.item, complete: !toggledCheckListItem.complete };\n        const tasks = this.props.card.checkList.tasks.map((item, currIndex) => {\n            return (currIndex === index ? editedCheckListItem : item);\n        });\n        const editedCard = {\n            ...this.props.card,\n            checkList: {\n                title: this.props.card.checkList.title,\n                tasks\n            }\n        }\n        this.props.editCard(this.props.cardId, editedCard);\n    }\n\n    handleDescriptionChange = e => {\n        const description = e.target.value\n        this.setState({ description })\n    }\n\n    submitDescription = e => {\n        e.preventDefault()\n        const { id } = this.props.card\n        const { description } = this.state\n        this.props.addCardDescription(id, description)\n        this.setState({\n            isSubmitted: true,\n            isEdit: true\n        })\n    }\n\n    editDescription = () => {\n        this.setState({\n            isSubmitted: false,\n            isEdit: true\n        })\n    }\n\n    render() {\n\n        const currentDate = moment();\n        const { card, isModalOpen, toggleModal, cardId, list, deleteCard, content } = this.props;\n        const { description, isSubmitted, isEdit } = this.state\n        return (\n            <div className=\"card-modal\" style={{ display: isModalOpen === cardId ? 'block' : 'none' }}>\n                <div className=\"card-modal__content\">\n                    <div className=\"card-modal__content-title modal-elements\">\n                        <h4><i className=\"far fa-window-maximize left-side-icons\"></i><span>{card.content}</span></h4>\n                        <button onClick={toggleModal}><i className=\"fas fa-times close-modal\"></i></button>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"left-col\">\n                            <div className=\"card__details\">\n                                {card.dueDate && (\n                                    <div className=\"card__due-date\">\n                                        <h3 className=\"due-date__title\"><i className=\"fa fa-calendar left-side-icons\"></i>Due Date</h3>\n                                        <p className={(currentDate.isBefore(card.dueDate) ? \"due-date__date\" : \"due-date__date due-date__date--overdue\")}>\n                                            {moment(card.dueDate).format('MMM Do YYYY')}\n                                        </p>\n                                    </div>)}\n                            </div>\n                            {/* <div className=\"row\"> */}\n                            <section className=\"col double-col\">\n                                <div className=\"description\">\n                                    <h5 className=\"modal-elements description__title\">\n                                        <i className=\"fas fa-align-left left-side-icons\"></i>\n                                        Description {\n                                            // show edit button when isSubmited is false and isEdit is true\n                                            !isSubmitted || isEdit && (<span onClick={this.editDescription}>Edit</span>)}</h5>\n                                    {// if isSubmitted is false, show form. Else, hide form and show description\n                                        !isSubmitted && <form className=\"description__form\" onSubmit={this.submitDescription}>\n                                            <textarea\n                                                rows=\"5\"\n                                                className=\"description__form-textarea\"\n                                                value={description}\n                                                placeholder=\"Add a more detailed description...\"\n                                                onChange={this.handleDescriptionChange}\n                                            ></textarea>\n                                            <button>Save</button>\n                                        </form>\n                                    }\n                                    {\n                                        isSubmitted && <p>{description}</p>\n                                    }\n                                </div>\n                                {card.checkList && (\n                                    <CheckList\n                                        style={dateStyle}\n                                        checkList={card.checkList}\n                                        onToggleCheckBox={this.onToggleCheckBox}\n                                        addCheckListItem={this.addCheckListItem}\n                                        onDeleteCheckListItem={this.onDeleteCheckListItem}\n                                        editCheckListItem={this.editCheckListItem}\n                                        deleteCheckList={this.deleteCheckList}\n                                        changeCheckListTitle={this.changeCheckListTitle}\n                                    />\n                                )}\n                            </section>\n                        </div>\n\n                        <div className=\"right-col\">\n                            <aside className=\"col\">\n                                <p className=\"modal-aside-title\">add to card</p>\n                                <button onClick={this.createNewCheckList} disabled={card.checkList}><i className=\"fa fa-check-square\"></i> <span>Checklist</span></button>\n\n                                <div className=\"datePicker__wrapper\">\n                                    <div className=\"datePicker__icon\">\n                                        <i className=\"fa fa-calendar-alt\"></i>\n                                    </div>\n                                    <SingleDatePicker\n                                        placeholder={\"Due Date\"}\n                                        readOnly={true}\n                                        date={this.state.createdAt}\n                                        onDateChange={this.onDateChange}\n                                        focused={this.state.calendarFocused}\n                                        onFocusChange={this.onCalendarFocusChange}\n                                        hideKeyboardShortcutsPanel={true}\n                                        numberOfMonths={1}\n                                        isOutsideRange={() => false}\n                                    />\n                                </div>\n\n\n                                <p className=\"modal-aside-title\">actions</p>\n                                <button onClick={() => {\n                                    if (window.confirm(\"Delete \" + content + \"?\")) {\n                                        deleteCard(cardId, list);\n                                    }\n                                }\n\n                                }><i className=\"fa fa-trash\"></i> <span>Delete</span></button>\n                            </aside>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n","import React, { Fragment } from \"react\";\nimport { Draggable } from 'react-beautiful-dnd';\nimport { faTextHeight } from \"@fortawesome/free-solid-svg-icons\";\nimport CardModal from \"../CardModal/CardModal\"\nimport { fstat } from \"fs\";\n\nexport default class Card extends React.Component {\n\n\n    /* MOVED ISMODALOPEN AND TOGGLEMODAL FROM CARD TO LIST FOR THE MODAL DRAGGABLE ISSUE */\n\n    \n    // state = {\n    //     isModalOpen: false\n    // }\n    \n\n    // toggleModal = () => {\n    //     const { isModalOpen } = this.state\n    //     this.setState({\n    //         isModalOpen: !isModalOpen\n    //     })\n    // }\n\n    render() {\n        // const { isModalOpen } = this.props\n        const { toggleModal, isModalOpen, content, editCard, deleteCard, cardId, list, card, addCardDescription } = this.props;\n        return (\n            <Fragment>\n                <Draggable draggableId={this.props.cardId} index={this.props.index}>\n                    {(provided) => (\n                        <li\n                            className=\"card\"\n                            {...provided.draggableProps}\n                            {...provided.dragHandleProps}\n                            ref={provided.innerRef}\n                            onClick={()=> {toggleModal(this.props.cardId)}}\n                        >\n                            {provided.placeholder}\n                            {content}\n                        {/* </li> */}\n                        </li>\n                    )}\n                    \n                </Draggable>\n                <CardModal disableInteractiveElementBlocking={true} isDragDisabled={isModalOpen !== '' ? false : true} draggableProps={null} dragHandleProps={null} content={content} deleteCard={deleteCard} cardId={cardId} list={list} card={card} toggleModal={toggleModal} isModalOpen={isModalOpen} editCard={editCard} addCardDescription={addCardDescription} />\n            </Fragment>\n        )\n    }\n}\n","import React, { Component } from 'react'\n\nclass ListMenu extends Component {\n\n  state = {\n    menuDisplay: 'default',\n    titleName: ''\n  }\n\n  UNSAFE_componentWillMount() {\n    document.addEventListener(\"mousedown\", this.handleToggleListMenu, false);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"mousedown\", this.handleToggleListMenu, false);\n  }\n\n  handleToggleListMenu = e => {\n    if (this.node.contains(e.target)) {\n      return;\n    }\n    this.props.toggleListMenu();\n  }\n\n  componentDidMount = () => {\n    this.setState({ titleName: this.props.title });\n  }\n  \n  displayCopyList = () => {\n    this.setState({ menuDisplay: 'copyList' });\n  }\n\n  onCopyTitleChange = (titleName) => {\n    this.setState({ titleName }); \n  }\n\n  render = () => {\n    const { toggleListMenu, deleteList, listId } = this.props\n\n    switch (this.state.menuDisplay) {\n      case 'copyList':\n        return (\n          <div className=\"list-menu\" ref={node => this.node = node}>\n            <header className=\"list-menu__header\">\n              <p className=\"list-menu__header-title\">Copy List</p>\n              <button onClick={toggleListMenu} className=\"list-menu__header-close-btn\"><i className=\"fas fa-times\"></i></button>\n            </header>\n            <section className=\"action-list\">\n              <h4 className=\"copy-list__title\">Name</h4>\n              <div className=\"copy-menu__title-input\">\n                <textarea\n                  onChange={(e) => { this.onCopyTitleChange(e.target.value) }}\n                  className=\"title-input__text\"\n                  value={this.state.titleName} />\n              </div>\n              <button\n                onClick={() => {\n                  let title = this.state.titleName || this.props.title;\n                  this.props.copyList(listId, title);\n                  toggleListMenu();\n                }}\n                className=\"btn--menu btn--submit btn--copy-memu\">\n                Create List\n                </button>\n            </section>\n          </div>\n        )\n        break;\n      default:\n        return (\n          <div className=\"list-menu\" ref={node => this.node = node}>\n            <header className=\"list-menu__header\">\n              <p className=\"list-menu__header-title\">List Actions</p>\n              <button onClick={toggleListMenu} className=\"list-menu__header-close-btn\"><i className=\"fas fa-times\"></i></button>\n            </header>\n            <section className=\"action-list\">\n              <button className=\"action-list__btn\"\n                onClick={this.displayCopyList}\n              >Copy List...</button>\n              <button className=\"action-list__btn\"\n                onClick={() => {\n                  deleteList(listId);\n                }}\n              >Delete List...</button>\n            </section>\n          </div>\n        )\n    }\n  }\n}\n\nexport default ListMenu","import React, { Component, Fragment } from \"react\";\nimport { Droppable, Draggable } from \"react-beautiful-dnd\";\nimport CardForm from \"../Card/CardForm\";\nimport Card from \"../Card/Card\";\nimport ListMenu from \"./ListMenu\";\n\nclass List extends Component {\n  state = {\n    isEdit: false,\n    isSubmitted: true,\n    showCardForm: false,\n    cardVal: \"\",\n    listMenuOpen: false,\n    // MOVED ISMODALOPEN FROM CARD TO LIST\n    isModalOpen: '',\n  };\n  // MOVED TOGGALMODAL FROM CARD TO LIST\n  toggleModal = (cardId) => {\n    this.setState((prevState) =>{\n       return  {\n        isModalOpen: (prevState.isModalOpen === '' ?  cardId : '')\n    }});\n  }\n  \n  UNSAFE_componentWillMount() {\n    document.addEventListener(\"mousedown\", this.handleSaveTitle, false);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"mousedown\", this.handleSaveTitle, false);\n  }\n\n  handleSaveTitle = e => {\n    if (this.node.contains(e.target)) {\n      return;\n    }\n    // if empty, list will be deleted when user clicks outside out if\n    if (!this.props.list.title) {\n      this.props.deleteList(this.props.list.id)\n    } else {\n      this.setState({\n        isEdit: false,\n        isSubmitted: true\n      })\n    }\n  }\n  componentDidMount = (prevProps) => {\n    if (prevProps !== this.props) {\n      if (!this.props.isSubmitted) {\n        console.log(\"setting List Form Up\");\n        this.setState({ isSubmitted: false });\n      }\n    }\n  }\n\n  toggleTitleForm = () => {\n    const { isEdit } = this.state;\n    this.setState({\n      isEdit: !isEdit\n    });\n  };\n\n  saveListTitle = e => {\n    e.preventDefault();\n    // if empty alert user\n    if (!this.props.list.title) {\n      alert(\"List cannot be blank\");\n    }\n    // else set isEdit to false\n    else {\n      this.setState({\n        isEdit: false,\n        isSubmitted: true\n      });\n    }\n  };\n\n  // CARD\n  toggleCardForm = () => {\n    const { showCardForm } = this.state;\n    this.setState({\n      showCardForm: !showCardForm\n    });\n  };\n\n  handleCardValChange = e => {\n    this.setState({\n      cardVal: e.target.value\n    });\n  };\n\n  addToCard = e => {\n    e.preventDefault();\n    const { cardVal } = this.state;\n    // if cardVal is empty, alert user\n    if (!cardVal) {\n      alert(\"please add a card\");\n    } else {\n      this.props.addCard(this.props.list.id, cardVal);\n      this.setState({\n        cardVal: \"\"\n      });\n    }\n    this.setState({\n      showCardForm: !this.state.showCardForm\n    })\n  };\n\n  toggleListMenu = () => {\n    this.setState({\n      listMenuOpen: !this.state.listMenuOpen\n    })\n  }\n\n\n  // WILL USE FUNCTION INSIDE OF MODAL TO DELETE CARD\n  // deleteCard = id => {\n  //   const filteredCards = this.state.cards.filter(card => card.id !== id);\n  //   this.setState({\n  //     cards: filteredCards\n  //   });\n  // };\n\n  render() {\n    const { isEdit, isSubmitted, showCardForm, cardVal, listMenuOpen, isModalOpen } = this.state;\n    const { id, title } = this.props.list;\n    const { handleTitleChange, cardList, addCardDescription } = this.props;\n    return (\n      <Draggable\n        draggableId={this.props.listId}\n        index={this.props.index}\n        isDragDisabled={isModalOpen}\n      >\n        {(provided) => (\n          <div\n            className=\"list\"\n            {...provided.draggableProps}\n            ref={provided.innerRef}\n            {...provided.dragHandleProps}\n          >\n            <div className=\"list--title\" ref={node => this.node = node}>\n              {// if form has not been submitted, show form. Also, show form if isEdit is true\n                !isSubmitted || isEdit ? (\n                  <form\n                    onSubmit={this.saveListTitle}\n                    className=\"list--form\" >\n                    <input\n                      type=\"text\"\n                      className=\"list--form-input\"\n                      autoFocus={true}\n                      value={title}\n                      onChange={e => handleTitleChange(id, e.target.value)}\n                    />\n                    {// if editing list title, no need to show \"Add List\" button\n                      !isEdit && <button>Add List</button>}\n                    {\n                      isEdit && <button>Edit List</button>}\n                  </form>\n                ) : (\n                    <Fragment>\n                      <h3 onClick={this.toggleTitleForm}>{title}</h3>\n                      <button className=\"open-list-menu-btn\" onClick={this.toggleListMenu}><i className=\"fas fa-ellipsis-h fa-sm\"></i></button>\n                      {\n                        listMenuOpen &&\n                        <ListMenu\n\n                          toggleListMenu={this.toggleListMenu}\n                          copyList={this.props.copyList}\n                          deleteList={this.props.deleteList}\n                          listId={id}\n                          title={title}\n                        />\n                      }\n\n                    </Fragment>\n                  )}\n            </div>\n            {provided.placeholder}\n\n            {\n              <Droppable\n                droppableId={this.props.listId}\n                type=\"task\"\n              >\n\n                {(provided) => (\n                  <ul\n                    className=\"card-list\"\n                    ref={provided.innerRef}\n                    {...provided.droppableProps}\n                  >\n                    {provided.placeholder}\n                    {cardList.map((card, index) => (\n                      <Card\n                        key={card.id}\n                        cardId={card.id}\n                        content={card.content}\n                        index={index}\n                        card={card}\n                        deleteCard={this.props.deleteCard}\n                        list={this.props.list}\n                        editCard={this.props.editCard}\n                        addCardDescription={addCardDescription}\n                        toggleModal={this.toggleModal}\n                        isModalOpen={this.state.isModalOpen}\n                      >\n                        {/* {provided.placeholder} */}\n                      </Card>\n                    ))}\n                    {/* </ul> */}\n                  </ul>\n                )}\n              </Droppable>\n            }\n\n            {// if showCardForm is true, show form\n              showCardForm && (\n                <CardForm\n                  cardVal={cardVal}\n                  handleCardValChange={this.handleCardValChange}\n                  addToCard={this.addToCard}\n                  toggleCardForm={this.toggleCardForm}\n                />\n              )}\n\n            {// if isSubmitted is true, user can click \"Add a card\" to toggle form\n              isSubmitted && !showCardForm && (\n                <p className=\"add-card-btn\" onClick={this.toggleCardForm}>\n                  + <span>Add a card...</span>\n                </p>\n              )}\n            {/* <button\n              className=\"btn btn--delete-list\"\n              onClick={e => {\n                e.preventDefault();\n                if(window.confirm('Are you sure you want to delete ' + title + '?')) {\n                  alert(\"List \" + title + \" deleted.\");\n                  this.props.deleteList(id);\n                } else {}\n                // this.props.deleteList(id);\n              }}\n            >\n              Delete List\n        </button> */}\n          </div>)}\n\n      </Draggable>\n    );\n  }\n}\n\nexport default List;\n","import React, { Component } from \"react\";\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport SimpleStorage, { clearStorage } from \"react-simple-storage\";\nimport 'normalize.css';\nimport \"./App.scss\";\n\n// use uuid to generate random id's\nimport uuid from \"uuid\";\n\nimport \"./App.scss\";\nimport BoardNav from \"./Component/BoardNav/BoardNav.js\";\n//import MainMenu from \"./Component/MainMenu.js\";\nimport TrelloNav from \"./Component/TrelloNav.js\";\n\nimport List from \"./Component/List/List\";\n//import BackgroundSelection from \"./Component/Background/BackgroundSelection\";\n\nimport Dragon from './sass/images/dragon.jpg';\nimport Scene3 from './Component/Background/images/scene3.jpg';\n//import { faImages } from \"@fortawesome/free-solid-svg-icons\";\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      styleType: { backgroundImage: `url(${Scene3})` },\n      backgroundType: '',\n      cards: {'sample_card': {\n        id: 'sample_card',\n        content: 'Sample Card'\n      }},\n      lists: {'sample_list':{\n        id: 'sample_list',\n        title: \"Sample List\",\n        taskIds: ['sample_card']\n        }\n      },\n      listOrder: ['sample_list']\n    };\n  }\n\n\n  // addList = () => {\n  //   const { lists } = this.state;\n  //   const listId = uuid().replace(/-/g, \"\");\n  //   const newList = Object.assign(lists, {\n  //     [listId]: {\n  //       id: listId,\n  //       title: \"\",\n  //       taskIds: []\n  //     }\n  //   });\n  //   this.setState({\n  //     lists: newList\n  //   });\n  // console.log(lists);\n\n  handleBackgroundColor = () => { this.setState({ backgroundType: 'Colors' }) }\n\n  handleBackgroundImage = () => { this.setState({ backgroundType: 'Images' }) }\n\n  handleBackgroundChange = (newBackground) => {\n    let styleType = ((this.state.backgroundType === 'Colors') ? { backgroundColor: `${newBackground}` } : { backgroundImage: `url(${newBackground})` })\n    this.setState({ styleType })\n  }\n  // console.log(lists);\n  // };\n\n\n  addList = () => {\n    const { lists } = this.state;\n    const listId = uuid().replace(/-/g, \"\");\n    const newList = Object.assign(lists, {\n      [listId]: {\n        id: listId,\n        title: \"\",\n        taskIds: []\n      }\n    });\n    this.setState({\n      lists: newList\n    });\n    // console.log(lists);\n    // add the created list inside the listOrder array\n    for (let list in lists) {\n      this.setState({\n        listOrder: [...this.state.listOrder, list]\n      });\n    }\n    // console.log(lists);\n  };\n\n  //We need to make copies of the cards from the original List, and add those to the list copy.\n  copyCards = (cardsToCopy) => {\n    const cards = {...this.state.cards};\n    const taskIds= [];\n    cardsToCopy.forEach(card => {\n      console.log(card);\n      const id = uuid().replace(/-/g, \"\");\n      cards[id] = {...cards[card]};\n      cards[id].id = id;\n      taskIds.push(id);\n    });\n    return {cards, taskIds};\n  }\n\n  copyList = (idToCopy, title=\"\") => {\n    const id = uuid().replace(/-/g, \"\");\n    const listCopy = {...this.state.lists[idToCopy]};\n    listCopy.id = id;\n    if (title) {\n      listCopy.title = title;\n    }\n    const index = this.state.listOrder.indexOf(idToCopy);\n    const lists = {...this.state.lists, [id]:listCopy};\n    const {cards, taskIds} = this.copyCards(listCopy.taskIds);\n    lists[id].taskIds = taskIds;\n    const listOrder = this.state.listOrder.slice(0, index+1).concat(id).concat(this.state.listOrder.slice(index+1));\n    this.setState({ cards, lists, listOrder });\n  }\n\n  // const newTaskIds = list.taskIds.filter(task => task !== cardName);\n  //   const newCards = { ...this.state.cards };\n  //   delete newCards[cardName];\n  //   const list_copy = { ...this.state.lists };\n  //   for (let key in list_copy) {\n  //     if (list_copy[key].id === list.id) {\n  //       list_copy[key] = { ...list, taskIds: newTaskIds };\n  //     }\n  //   }\n  //   console.log(newCards, this.state.cards);\n  //   this.setState({ cards: newCards, lists: list_copy });\n\n  deleteList = id => {\n    const { cards, lists, listOrder } = this.state;\n    const taskIds = lists[id].taskIds;\n    const newCards = { ...cards };\n    taskIds.forEach(taskId => delete newCards[taskId]);\n    const newLists = { ...lists };\n    delete newLists[id];\n    let index = listOrder.indexOf(id);\n    const newListOrder = [...listOrder];\n    newListOrder.splice(index, 1);\n    this.setState({\n      cards: newCards,\n      lists: newLists,\n      listOrder: newListOrder\n    });\n  };\n\n  // edit list title\n  handleTitleChange = (id, e) => {\n    const { lists } = this.state;\n    for (let list in lists) {\n      if (lists[list].id == id) {\n        lists[list].title = e;\n      }\n    }\n    this.setState({\n      lists: lists\n    });\n  };\n\n  addCard = (id, e) => {\n    const { cards, lists } = this.state;\n    // generate card id\n    const cardId = uuid().replace(/-/g, \"\");\n    // make a new card\n    const newCard = {\n      [cardId]: {\n        id: cardId,\n        content: e\n      }\n    };\n\n    // add the new card inside the cards object\n    Object.assign(cards, newCard);\n\n    this.setState({\n      cards\n    });\n\n    // loop through lists object\n    for (let list in lists) {\n      if (lists.hasOwnProperty(list)) {\n        // check if id's are equal\n        if (lists[list].id === id) {\n          // loop through cards object\n          for (let card in newCard) {\n            // add card to taskIds array\n            lists[list].taskIds = [...lists[list].taskIds, card];\n          }\n        }\n      }\n    }\n    this.setState({\n      lists\n    });\n  };\n\n  editCard = (id, editedCard) => {\n    const cards = { ...this.state.cards };\n    cards[id] = editedCard;\n    this.setState({\n      cards\n    });\n  }\n\n  // add a description to a card\n  addCardDescription = (id, description) => {\n    const { cards } = this.state\n    for (let card in cards) {\n      if (cards[card].id === id) {\n        return Object.assign(cards[card], { description: description });\n      }\n    }\n    this.setState({\n      cards: { ...cards }\n    })\n  }\n\n\n  //   deleteCard = (cardName, list) => {\n  //     const newTaskIds = list.taskIds.filter(task => task !== cardName);\n  //     const newCards = { ...this.state.cards };\n  //     delete newCards[cardName];\n  //     const list_copy = { ...this.state.lists };\n  //     for (let key in list_copy) {\n  //       if (list_copy[key].id === list.id) {\n  //         list_copy[key] = { ...list, taskIds: newTaskIds };\n  //       }\n  //     }\n  //     this.setState({ cards: newCards, lists: list_copy });\n  //   };\n\n  //   this.setState({\n  //     lists\n  //   });\n  // };\n\n\n\n  deleteCard = (cardName, list) => {\n    const newTaskIds = list.taskIds.filter(task => task !== cardName);\n    const newCards = { ...this.state.cards };\n    delete newCards[cardName];\n    const list_copy = { ...this.state.lists };\n    for (let key in list_copy) {\n      if (list_copy[key].id === list.id) {\n        list_copy[key] = { ...list, taskIds: newTaskIds };\n      }\n    }\n    this.setState({ cards: newCards, lists: list_copy });\n  };\n\n  onDragEnd = result => {\n    const { destination, source, draggableId, type } = result;\n\n    if (!destination) {\n      return;\n    }\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      return;\n    }\n    if (type === 'column') {\n      const newListOrder = Array.from(this.state.listOrder);\n      newListOrder.splice(source.index, 1);\n      newListOrder.splice(destination.index, 0, draggableId);\n\n      const newState = {\n        ...this.state,\n        listOrder: newListOrder,\n      };\n      this.setState(newState);\n      return;\n    }\n\n    const home = this.state.lists[source.droppableId];\n    const foreign = this.state.lists[destination.droppableId];\n\n    if (home === foreign) {\n      const newCardIds = Array.from(home.taskIds);\n      newCardIds.splice(source.index, 1);\n      newCardIds.splice(destination.index, 0, draggableId);\n\n      const newList = {\n        ...home,\n        taskIds: newCardIds,\n      }\n\n      const newState = {\n        ...this.state,\n        lists: {\n          ...this.state.lists,\n          [newList.id]: newList,\n        },\n      };\n\n      this.setState(newState);\n      return;\n    }\n\n    // Moving from one list to another\n    const homeTaskIds = Array.from(home.taskIds);\n    homeTaskIds.splice(source.index, 1);\n\n    const newHome = {\n      ...home,\n      taskIds: homeTaskIds,\n    };\n\n    const foreignTaskIds = Array.from(foreign.taskIds);\n    foreignTaskIds.splice(destination.index, 0, draggableId);\n\n    const newForeign = {\n      ...foreign,\n      taskIds: foreignTaskIds,\n    };\n\n    const newState = {\n      ...this.state,\n      lists: {\n        ...this.state.lists,\n        [newHome.id]: newHome,\n        [newForeign.id]: newForeign,\n      },\n    };\n\n    this.setState(newState);\n  }\n\n  //   const dropId = source.droppableId;\n  //   const list = this.state.lists[dropId];\n  //   var newCardIds = Array.from(list.taskIds);\n  //   newCardIds.splice(source.index, 1);\n  //   newCardIds.splice(destination.index, 0, draggableId);\n  //   let lists = this.state.lists;\n  //   lists[dropId].taskIds = newCardIds;\n  //   this.setState({\n  //     lists\n  //   })\n\n  // }\n\n  render() {\n\n    const { lists, cards, listOrder, styleType } = this.state;\n    return (\n      <div className=\"App\" style={styleType}>\n        <SimpleStorage parent={this} prefix={\"Geckos14_Trello_Clone\"} />\n        <TrelloNav />\n        <BoardNav\n          handleBackgroundChange={this.handleBackgroundChange}\n          handleBackgroundColor={this.handleBackgroundColor}\n          handleBackgroundImage={this.handleBackgroundImage} />\n        <DragDropContext\n          onDragEnd={this.onDragEnd}\n        >\n          <Droppable\n            droppableId=\"all-columns\"\n            direction=\"horizontal\"\n            type=\"column\"\n            key={lists.id}\n          >\n            {(provided) => (\n              <div className=\"App-header\"\n                {...provided.droppableProps}\n                ref={provided.innerRef}\n              >\n                {listOrder.map((listId, index) => {\n                  const list = lists[listId];\n                  const cardList = list.taskIds.map(id => cards[id]);\n                  return (\n                    <List\n                      isSubmitted={list.title===\"\" ? false : true }\n                      key={list.id}\n                      listId={list.id}\n                      list={list}\n                      copyList={this.copyList}\n                      cardList={cardList}\n                      handleTitleChange={this.handleTitleChange}\n                      addCard={this.addCard}\n                      editCard={this.editCard}\n                      deleteCard={this.deleteCard}\n                      editCard={this.editCard}\n                      deleteList={this.deleteList}\n                      addCardDescription={this.addCardDescription}\n                      index={index}\n                    >\n                      {provided.placeholder}\n                    </List>\n                  );\n                })}\n\n                <button className=\"add-list-btn\" onClick={this.addList}>\n                  + Add another list\n          </button>\n              </div>\n            )}\n          </Droppable>\n        </DragDropContext>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/scene3.4be96530.jpg\";"],"sourceRoot":""}